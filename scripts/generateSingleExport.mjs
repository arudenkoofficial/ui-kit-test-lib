import * as fs from 'node:fs'
import lodash from 'lodash'

const { template } = lodash

const render = template(
  `
// GENERATED BY ./scripts/generateSingleExport.mjs
// DO NOT EDIT IT MANUALLY

import './styles.module.scss'

<%= components %>
`.trim()
)

const renderItem = template(
  `
export * from './<%= componentName %>'
`.trim()
)

const COMPONENTS_PATH = './src'
const componentNames = []

if (fs.existsSync(`${COMPONENTS_PATH}/index.ts`)) {
  fs.rmSync(`${COMPONENTS_PATH}/index.ts`, { recursive: true, force: true })
}
if (fs.existsSync(`${COMPONENTS_PATH}/styles.module.scss`)) {
  fs.rmSync(`${COMPONENTS_PATH}/styles.module.scss`, {
    recursive: true,
    force: true,
  })
}

fs.readdirSync(COMPONENTS_PATH, { withFileTypes: true }).forEach((item) => {
  if (item.isDirectory() && item.name !== '_internal') {
    componentNames.push(item.name)
  }
})

fs.writeFile(
  './src/index.ts',
  render({
    components: componentNames
      .map((componentName) => renderItem({ componentName }))
      .join('\n'),
  }),
  function (err) {
    if (err) throw err
    console.log('Single entry file for components created')
  }
)

const renderCss = template(
  `
// GENERATED BY ./scripts/generateSingleExport.mjs
// DO NOT EDIT IT MANUALLY

<%= styles %>
`.trim()
)

const renderCssItem = template(
  `
@import './<%= style %>/styles.module';
`.trim()
)

const CSS_NAMES = componentNames.filter((item) =>
  fs.existsSync(`./src/${item}/styles.module.scss`)
)

fs.writeFile(
  './src/styles.module.scss',
  renderCss({
    styles: CSS_NAMES.map((style) => renderCssItem({ style })).join('\n'),
  }),
  function (err) {
    if (err) throw err
    console.log('Single entry file for styles created')
  }
)
