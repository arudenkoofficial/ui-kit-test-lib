import * as fs from 'node:fs'
import lodash from 'lodash'

const { template } = lodash

const render = template(
  `
// GENERATED BY ./scripts/generateIcons.mjs
// DO NOT EDIT IT MANUALLY

import React from 'react'
import { ReactComponent } from '../../_internal/assets/icons/<%= svgPath %>'

const <%= svgName %> = (props) => (
  React.createElement(ReactComponent, { ...props })
)

export default <%= svgName %>
`.trim()
)

const uppercaseFirstLetter = (word) =>
  word.charAt(0).toUpperCase() + word.slice(1)

const createIconsFolder = () => {
  const iconsDirPath = './src/Icons'

  if (fs.existsSync(iconsDirPath)) {
    fs.rmSync(iconsDirPath, { recursive: true, force: true })
  }

  fs.mkdirSync(iconsDirPath)
}

const prefixesMap = {}

const buildIcons = (source) => {
  fs.readdirSync(source, { withFileTypes: true }).forEach((item) => {
    const iconsDirPath = './src/Icons'
    const iconPathPrefixSrc = item.path.split('src/_internal/assets/icons/')[1]
    const [prefix, size] = iconPathPrefixSrc.split('/')
    const [name] = item.name.split('.svg')
    const iconName = name.split('-').map(uppercaseFirstLetter).join('')
    const svgName = `${iconName}${size}`
    const dirName = `${iconsDirPath}/${svgName}`
    const fileName = `${dirName}/index.js`
    const svgPath = `${iconPathPrefixSrc}/${item.name}`

    if (prefixesMap[prefix]) {
      prefixesMap[prefix] = [...prefixesMap[prefix], svgName]
    } else {
      prefixesMap[prefix] = [svgName]
    }

    fs.mkdirSync(dirName)
    fs.writeFile(fileName, render({ svgName, svgPath }), function (err) {
      if (err) throw err
      console.log(`${svgName} created`)
    })
  })
}

createIconsFolder()

fs.readdirSync('src/_internal/assets/icons', { withFileTypes: true }).forEach(
  (item) => {
    if (item.isDirectory()) {
      fs.readdirSync(`${item.path}/${item.name}`, {
        withFileTypes: true,
      }).forEach((item) => {
        if (item.isDirectory()) {
          buildIcons(`${item.path}/${item.name}`)
        }
      })
    }
  }
)

const renderImport = template(
  `
  import <%= name %> from './<%= name %>'
`.trim()
)

const renderPrefix = template(
  `
 <h1
  style={{
    width: '100%',
    borderBottom: '0.5px solid black'
  }}
>
  <%= prefix %>
</h1>
`.trim()
)

const renderUsage = template(
  `
<div
  style={{
    width: 250,
    height: 100,
    display: 'flex',
    gap: 10,
    alignItems: 'center',
  }}
>
  <<%= name %> />
  <span><%= name %></span>
</div>
`.trim()
)

const renderStorybook = template(
  `
import { Meta, IconGallery } from '@storybook/blocks'

<%= imports %>

<Meta title="Icons" />

## Usage

\`\`\`tsx
import Add24 from 'tele2-ui-kit/lib/Icons/Add24'

const Component = () => (
  <div>
    <Add24 />
    ...
  </div>
)
\`\`\`

<IconGallery>
  <div style={{ display: 'flex', flexWrap: 'wrap' }}>
    <%= usages %>
  </div>
</IconGallery>

`.trim()
)

const buildStorybook = () => {
  const dirNames = fs
    .readdirSync('src/Icons', { withFileTypes: true })
    .filter((item) => item.isDirectory())
    .map((item) => item.name)

  const imports = dirNames.map((name) => renderImport({ name })).join('\n')
  const usages = Object.entries(prefixesMap)
    .map(([prefix, names]) => {
      const prefixTitle = renderPrefix({ prefix })
      return [
        prefixTitle,
        names.map((name) => renderUsage({ name })).join('\n '),
      ].join('\n ')
    })
    .join('\n ')

  fs.writeFile(
    './src/Icons/index.stories.mdx',
    renderStorybook({ imports, usages }),
    function (err) {
      if (err) throw err
      console.log(`Iconography created`)
    }
  )
}

buildStorybook()

const renderEnum = template(
  `
// GENERATED BY ./scripts/generateIcons.mjs
// DO NOT EDIT IT MANUALLY

import React, {
  FC,
  ReactNode,
  SVGProps,
  memo,
  useEffect,
  useState,
  ReactElement,
} from 'react'

export enum Icons {
  <%= names %>
}

type Props = {
  icon: Icons | ReactNode
} & SVGProps<SVGSVGElement>

const requireIconComponent = (
  icon: Icons | ReactNode,
  props: SVGProps<SVGSVGElement>
): ReactElement<SVGProps<SVGSVGElement>, string> | Icons | ReactNode => {
  try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const Component = require(\`./\${icon}\`)?.default as FC<
      SVGProps<SVGSVGElement>
    >
    return <Component {...props} />
  } catch {
    return icon
  }
}

const Icon: FC<Props> = ({ icon, ...props }) => {
  const [children, setChildren] = useState(requireIconComponent(icon, props))

  useEffect(() => {
    try {
      const component = requireIconComponent(icon, props)
      setChildren(component)
    } catch {
      setChildren(icon)
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [icon])

  return children
}

export default memo(Icon)
`.trim()
)

const renderName = template(
  `
<%= name %> = '<%= name %>',
`.trim()
)

const buildIconsEnum = () => {
  const dirNames = fs
    .readdirSync('src/Icons', { withFileTypes: true })
    .filter((item) => item.isDirectory())
    .map((item) => item.name)

  const names = dirNames.map((name) => renderName({ name })).join('\n')

  fs.writeFile(
    './src/Icons/Icons.tsx',
    renderEnum({ names, icon: '${icon}' }),
    function (err) {
      if (err) throw err
      console.log(`Enum created`)
    }
  )

  console.log('dirNames', dirNames)
}

buildIconsEnum()

const indexTs = `
// GENERATED BY ./scripts/generateIcons.mjs
// DO NOT EDIT IT MANUALLY

export { default as Icon, Icons } from './Icons'
`

const writeIndexTs = () => {
  fs.writeFile('./src/Icons/index.ts', indexTs, (err) => {
    if (err) throw err
    console.log('index.ts created')
  })
}

writeIndexTs()
